# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def stack_hci_arc_setting_list(client,
                               resource_group_name,
                               cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def stack_hci_arc_setting_show(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      arc_setting_name=arc_setting_name)


def stack_hci_arc_setting_create(client,
                                 resource_group_name,
                                 cluster_name,
                                 arc_setting_name,
                                 arc_instance_resource_group=None,
                                 created_by=None,
                                 created_by_type=None,
                                 created_at=None,
                                 last_modified_by=None,
                                 last_modified_by_type=None,
                                 last_modified_at=None):
    arc_setting = {}
    if arc_instance_resource_group is not None:
        arc_setting['arc_instance_resource_group'] = arc_instance_resource_group
    if created_by is not None:
        arc_setting['created_by'] = created_by
    if created_by_type is not None:
        arc_setting['created_by_type'] = created_by_type
    if created_at is not None:
        arc_setting['created_at'] = created_at
    if last_modified_by is not None:
        arc_setting['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        arc_setting['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        arc_setting['last_modified_at'] = last_modified_at
    return client.create(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         arc_setting_name=arc_setting_name,
                         arc_setting=arc_setting)


def stack_hci_arc_setting_delete(client,
                                 resource_group_name,
                                 cluster_name,
                                 arc_setting_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name)


def stack_hci_cluster_list(client,
                           resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def stack_hci_cluster_show(client,
                           resource_group_name,
                           cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def stack_hci_cluster_create(client,
                             resource_group_name,
                             cluster_name,
                             location,
                             tags=None,
                             cloud_management_endpoint=None,
                             aad_client_id=None,
                             aad_tenant_id=None,
                             desired_properties=None,
                             created_by=None,
                             created_by_type=None,
                             created_at=None,
                             last_modified_by=None,
                             last_modified_by_type=None,
                             last_modified_at=None):
    cluster = {}
    if tags is not None:
        cluster['tags'] = tags
    cluster['location'] = location
    if cloud_management_endpoint is not None:
        cluster['cloud_management_endpoint'] = cloud_management_endpoint
    if aad_client_id is not None:
        cluster['aad_client_id'] = aad_client_id
    if aad_tenant_id is not None:
        cluster['aad_tenant_id'] = aad_tenant_id
    if desired_properties is not None:
        cluster['desired_properties'] = desired_properties
    if created_by is not None:
        cluster['created_by'] = created_by
    if created_by_type is not None:
        cluster['created_by_type'] = created_by_type
    if created_at is not None:
        cluster['created_at'] = created_at
    if last_modified_by is not None:
        cluster['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        cluster['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        cluster['last_modified_at'] = last_modified_at
    return client.create(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         cluster=cluster)


def stack_hci_cluster_update(client,
                             resource_group_name,
                             cluster_name,
                             tags=None,
                             cloud_management_endpoint=None,
                             aad_client_id=None,
                             aad_tenant_id=None,
                             desired_properties=None):
    cluster = {}
    if tags is not None:
        cluster['tags'] = tags
    if cloud_management_endpoint is not None:
        cluster['cloud_management_endpoint'] = cloud_management_endpoint
    if aad_client_id is not None:
        cluster['aad_client_id'] = aad_client_id
    if aad_tenant_id is not None:
        cluster['aad_tenant_id'] = aad_tenant_id
    if desired_properties is not None:
        cluster['desired_properties'] = desired_properties
    return client.update(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         cluster=cluster)


def stack_hci_cluster_delete(client,
                             resource_group_name,
                             cluster_name):
    return client.delete(resource_group_name=resource_group_name,
                         cluster_name=cluster_name)


def stack_hci_extension_list(client,
                             resource_group_name,
                             cluster_name,
                             arc_setting_name):
    return client.list_by_arc_setting(resource_group_name=resource_group_name,
                                      cluster_name=cluster_name,
                                      arc_setting_name=arc_setting_name)


def stack_hci_extension_show(client,
                             resource_group_name,
                             cluster_name,
                             arc_setting_name,
                             extension_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      arc_setting_name=arc_setting_name,
                      extension_name=extension_name)


def stack_hci_extension_create(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name,
                               extension_name,
                               force_update_tag=None,
                               publisher=None,
                               type_properties_extension_parameters_type=None,
                               type_handler_version=None,
                               auto_upgrade_minor_version=None,
                               settings=None,
                               protected_settings=None,
                               created_by=None,
                               created_by_type=None,
                               created_at=None,
                               last_modified_by=None,
                               last_modified_by_type=None,
                               last_modified_at=None,
                               no_wait=False):
    extension = {}
    if force_update_tag is not None:
        extension['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension['publisher'] = publisher
    if type_properties_extension_parameters_type is not None:
        extension['type_properties_extension_parameters_type'] = type_properties_extension_parameters_type
    if type_handler_version is not None:
        extension['type_handler_version'] = type_handler_version
    if auto_upgrade_minor_version is not None:
        extension['auto_upgrade_minor_version'] = auto_upgrade_minor_version
    if settings is not None:
        extension['settings'] = settings
    if protected_settings is not None:
        extension['protected_settings'] = protected_settings
    if created_by is not None:
        extension['created_by'] = created_by
    if created_by_type is not None:
        extension['created_by_type'] = created_by_type
    if created_at is not None:
        extension['created_at'] = created_at
    if last_modified_by is not None:
        extension['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        extension['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        extension['last_modified_at'] = last_modified_at
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name,
                       extension_name=extension_name,
                       extension=extension)


def stack_hci_extension_update(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name,
                               extension_name,
                               force_update_tag=None,
                               publisher=None,
                               type_properties_extension_parameters_type=None,
                               type_handler_version=None,
                               auto_upgrade_minor_version=None,
                               settings=None,
                               protected_settings=None,
                               created_by=None,
                               created_by_type=None,
                               created_at=None,
                               last_modified_by=None,
                               last_modified_by_type=None,
                               last_modified_at=None,
                               no_wait=False):
    extension = {}
    if force_update_tag is not None:
        extension['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension['publisher'] = publisher
    if type_properties_extension_parameters_type is not None:
        extension['type_properties_extension_parameters_type'] = type_properties_extension_parameters_type
    if type_handler_version is not None:
        extension['type_handler_version'] = type_handler_version
    if auto_upgrade_minor_version is not None:
        extension['auto_upgrade_minor_version'] = auto_upgrade_minor_version
    if settings is not None:
        extension['settings'] = settings
    if protected_settings is not None:
        extension['protected_settings'] = protected_settings
    if created_by is not None:
        extension['created_by'] = created_by
    if created_by_type is not None:
        extension['created_by_type'] = created_by_type
    if created_at is not None:
        extension['created_at'] = created_at
    if last_modified_by is not None:
        extension['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        extension['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        extension['last_modified_at'] = last_modified_at
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name,
                       extension_name=extension_name,
                       extension=extension)


def stack_hci_extension_delete(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name,
                               extension_name,
                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name,
                       extension_name=extension_name)


def stack_hci_galleryimage_list(client,
                                    resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()

def stack_hci_galleryimage_create(client,
                                      resource_group_name,
                                      name,
                                      location,
                                      tags=None,
                                      extended_location=None,
                                      container_name=None,
                                      image_path=None,
                                      os_type=None,
                                      provisioning_state=None,
                                      status=None):
    galleryimages = {}
    galleryimages['location'] = location
    galleryimages['tags'] = tags
    galleryimages['extended_location'] = extended_location
    galleryimages['properties'] = {}
    galleryimages['properties']['container_name'] = container_name
    galleryimages['properties']['image_path'] = image_path
    galleryimages['properties']['os_type'] = os_type
    galleryimages['properties']['provisioning_state'] = provisioning_state
    galleryimages['properties']['status'] = status
    return client.create_or_update(resource_group_name=resource_group_name,
                                         galleryimages_name=name,
                                         galleryimages=galleryimages)


def stack_hci_galleryimage_update(client,
                                      resource_group_name,
                                      name,
                                      tags=None):
    galleryimages = {}
    galleryimages['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         galleryimages_name=name,
                         galleryimages=galleryimages)


def stack_hci_galleryimage_delete(client,
                                      resource_group_name,
                                      name):
    return client.delete(resource_group_name=resource_group_name,
                         galleryimages_name=name)


def stack_hci_galleryimage_show(client,
                                        resource_group_name,
                                        name):
    return client.retrieve(resource_group_name=resource_group_name,
                           galleryimages_name=name)


def stack_hci_networkinterface_list(client,
                                        resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def stack_hci_networkinterface_create(client,
                                          resource_group_name,
                                          name,
                                          location,
                                          tags=None,
                                          extended_location=None,
                                          ip_configurations=None,
                                          mac_address=None,
                                          provisioning_state=None,
                                          status=None,
                                          subnet_id=None):
    networkinterfaces = {}
    networkinterfaces['location'] = location
    networkinterfaces['tags'] = tags
    networkinterfaces['extended_location'] = extended_location
    networkinterfaces['properties'] = {}
    networkinterfaces['properties']['ip_configurations'] = ip_configurations or list()
    networkinterfaces['properties']['mac_address'] = mac_address
    networkinterfaces['properties']['provisioning_state'] = provisioning_state
    networkinterfaces['properties']['status'] = status
    if subnet_id is not None:
        networkinterfaces['properties']['ip_configurations'].append({"name": "", "properties": {"subnet": {"id": subnet_id}}})
    return client.create_or_update(resource_group_name=resource_group_name,
                                         networkinterfaces_name=name,
                                         networkinterfaces=networkinterfaces)


def stack_hci_networkinterface_update(client,
                                          resource_group_name,
                                          name,
                                          tags=None):
    networkinterfaces = {}
    networkinterfaces['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         networkinterfaces_name=name,
                         networkinterfaces=networkinterfaces)


def stack_hci_networkinterface_delete(client,
                                          resource_group_name,
                                          name):
    return client.delete(resource_group_name=resource_group_name,
                         networkinterfaces_name=name)


def stack_hci_networkinterface_show(client,
                                            resource_group_name,
                                            name):
    return client.retrieve(resource_group_name=resource_group_name,
                           networkinterfaces_name=name)


def stack_hci_virtualharddisk_list(client,
                                       resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def stack_hci_virtualharddisk_create(client,
                                         resource_group_name,
                                         name,
                                         location,
                                         tags=None,
                                         extended_location=None,
                                         block_size_bytes=None,
                                         disk_size_bytes=None,
                                         dynamic=None,
                                         logical_sector_bytes=None,
                                         physical_sector_bytes=None,
                                         provisioning_state=None,
                                         status=None):
    virtualharddisks = {}
    virtualharddisks['location'] = location
    virtualharddisks['tags'] = tags
    virtualharddisks['extended_location'] = extended_location
    virtualharddisks['properties'] = {}
    virtualharddisks['properties']['block_size_bytes'] = block_size_bytes
    virtualharddisks['properties']['disk_size_bytes'] = disk_size_bytes
    virtualharddisks['properties']['dynamic'] = dynamic
    virtualharddisks['properties']['logical_sector_bytes'] = logical_sector_bytes
    virtualharddisks['properties']['physical_sector_bytes'] = physical_sector_bytes
    virtualharddisks['properties']['provisioning_state'] = provisioning_state
    virtualharddisks['properties']['status'] = status
    return client.create_or_update(resource_group_name=resource_group_name,
                                         virtualharddisks_name=name,
                                         virtualharddisks=virtualharddisks)


def stack_hci_virtualharddisk_update(client,
                                         resource_group_name,
                                         name,
                                         tags=None):
    virtualharddisks = {}
    virtualharddisks['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         virtualharddisks_name=name,
                         virtualharddisks=virtualharddisks)


def stack_hci_virtualharddisk_delete(client,
                                         resource_group_name,
                                         name):
    return client.delete(resource_group_name=resource_group_name,
                         virtualharddisks_name=name)


def stack_hci_virtualharddisk_show(client,
                                           resource_group_name,
                                           name):
    return client.retrieve(resource_group_name=resource_group_name,
                           virtualharddisks_name=name)


def stack_hci_virtualmachine_list(client,
                                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def stack_hci_virtualmachine_create(client,
                                        resource_group_name,
                                        name,
                                        location,
                                        tags=None,
                                        extended_location=None,
                                        hardware_profile=None,
                                        image_reference=None,
                                        network_profile=None,
                                        nic_id=None,
                                        os_profile=None,
                                        security_profile=None,
                                        storage_profile=None,
                                        linux_configuration=None,
                                        windows_configuration=None,
                                        provisioning_state=None,
                                        status=None,
                                        vm_size=None):
    virtualmachines = {}
    virtualmachines['location'] = location
    virtualmachines['tags'] = tags
    virtualmachines['extended_location'] = extended_location
    virtualmachines['properties'] = {}
    virtualmachines['properties']['hardware_profile'] = hardware_profile
    virtualmachines['properties']['network_profile'] = network_profile
    virtualmachines['properties']['os_profile'] = os_profile
    virtualmachines['properties']['security_profile'] = security_profile
    virtualmachines['properties']['storage_profile'] = storage_profile
    virtualmachines['properties']['linux_configuration'] = linux_configuration
    virtualmachines['properties']['windows_configuration'] = windows_configuration
    virtualmachines['properties']['provisioning_state'] = provisioning_state
    virtualmachines['properties']['status'] = status

    # Overriden Variables
    virtualmachines['properties']['storage_profile'] = {'image_reference': {'name': image_reference}}
    if nic_id is not None:
        virtualmachines['properties']['network_profile'] = {'network_interfaces': [{'id' : nic_id}]}
    virtualmachines['properties']['hardware_profile'] = {'vm_size' : vm_size}

    return client.create_or_update(resource_group_name=resource_group_name,
                                         virtualmachines_name=name,
                                         virtualmachines=virtualmachines)


def stack_hci_virtualmachine_update(client,
                                        resource_group_name,
                                        name,
                                        tags=None,
                                        cpu_count=None,
                                        memory_gb=None,
                                        vnic_names=None,
                                        vhd_names=None):
    virtualmachine_properties = {}
    if cpu_count is not None or memory_gb is not None:
        virtualmachine_properties['hardware_profile'] = {}
        if cpu_count is not None:
            virtualmachine_properties['hardware_profile']['processors'] = cpu_count
        if memory_gb is not None:
            virtualmachine_properties['hardware_profile']['memory_gb'] = memory_gb
    
    if vnic_names is not None:
        virtualmachine_properties['network_profile'] = { 'network_interfaces' : [] }
        for vnic_name in vnic_names:
            virtualmachine_properties['network_profile']['network_interfaces'].append({'id': vnic_name})
    
    if vhd_names is not None:
        virtualmachine_properties['storage_profile'] = {'data_disks':  [] }
        for vhd_name in vhd_names:
            virtualmachine_properties['storage_profile']['data_disks'].append({'name': vhd_name})

    return client.update(resource_group_name=resource_group_name,
                         virtualmachines_name=name,
                         properties=virtualmachine_properties,
                         tags=tags)


def stack_hci_virtualmachine_delete(client,
                                        resource_group_name,
                                        name):
    return client.delete(resource_group_name=resource_group_name,
                         virtualmachines_name=name)


def stack_hci_virtualmachine_show(client,
                                          resource_group_name,
                                          name):
    return client.retrieve(resource_group_name=resource_group_name,
                           virtualmachines_name=name)


def stack_hci_virtualmachine_start(client,
                                       resource_group_name,
                                       name):
    return client.start(resource_group_name=resource_group_name,
                        virtualmachines_name=name)


def stack_hci_virtualmachine_stop(client,
                                      resource_group_name,
                                      name):
    return client.stop(resource_group_name=resource_group_name,
                       virtualmachines_name=name)

def stack_hci_virtualmachine_restart(client,
                                      resource_group_name,
                                      name):
    return client.restart(resource_group_name=resource_group_name,
                       virtualmachines_name=name)

def stack_hci_virtualmachine_vnic_add(client,
                                      resource_group_name,
                                      name,
                                      vnic_names):
    return client.add_vnic(resource_group_name=resource_group_name,
                       virtualmachines_name=name, vnic_names=vnic_names)

def stack_hci_virtualmachine_vnic_remove(client,
                                      resource_group_name,
                                      name,
                                      vnic_names):
    return client.remove_vnic(resource_group_name=resource_group_name,
                       virtualmachines_name=name, vnic_names=vnic_names)

def stack_hci_virtualnetwork_list(client,
                                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def stack_hci_virtualnetwork_create(client,
                                        resource_group_name,
                                        name,
                                        location,
                                        tags=None,
                                        extended_location=None,
                                        network_type=None,
                                        subnets=None,
                                        provisioning_state=None,
                                        status=None):
    virtualnetworks = {}
    virtualnetworks['location'] = location
    virtualnetworks['tags'] = tags
    virtualnetworks['extended_location'] = extended_location
    virtualnetworks['properties'] = {}
    virtualnetworks['properties']['network_type'] = network_type
    virtualnetworks['properties']['subnets'] = subnets
    virtualnetworks['properties']['provisioning_state'] = provisioning_state
    virtualnetworks['properties']['status'] = status
    return client.create_or_update(resource_group_name=resource_group_name,
                                         virtualnetworks_name=name,
                                         virtualnetworks=virtualnetworks)


def stack_hci_virtualnetwork_update(client,
                                        resource_group_name,
                                        name,
                                        tags=None):
    virtualnetworks = {}
    virtualnetworks['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         virtualnetworks_name=name,
                         virtualnetworks=virtualnetworks)


def stack_hci_virtualnetwork_delete(client,
                                        resource_group_name,
                                        name):
    return client.delete(resource_group_name=resource_group_name,
                         virtualnetworks_name=name)


def stack_hci_virtualnetwork_show(client,
                                          resource_group_name,
                                          name):
    return client.retrieve(resource_group_name=resource_group_name,
                           virtualnetworks_name=name)